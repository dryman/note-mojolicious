# Notes on Mojolicous

Just a reading note for Perl Mojolicous framework

# Foundamentals of Modern Web Framework concerns

Most notes are copied from Mojolicous::Guides::Growing

## REpresentational State Transfer

The fundamental idea here is that all resources are uniquely addressable with
URLs and every resource can have different representations such as HTML, RSS or
JSON. User interface concerns are separated from data storage concerns and all
session state is kept client-side.

    .---------.                        .------------.
    |         | ->    PUT /foo      -> |            |
    |         | ->    Hello world!  -> |            |
    |         |                        |            |
    |         | <-    201 CREATED   <- |            |
    |         |                        |            |
    |         | ->    GET /foo      -> |            |
    | Browser |                        | Web Server |
    |         | <-    200 OK        <- |            |
    |         | <-    Hello world!  <- |            |
    |         |                        |            |
    |         | ->    DELETE /foo   -> |            |
    |         |                        |            |
    |         | <-    200 OK        <- |            |
    '---------'                        '------------'

## Sessions
HTTP was designed as a stateless protocol, web servers don't know anything about
previous requests, which makes user friendly login systems very tricky. Sessions
solve this problem by allowing web applications to keep stateful information
across several HTTP requests.

    GET /login?user=sri&pass=s3cret HTTP/1.1
      Host: mojolicio.us
    
      HTTP/1.1 200 OK
      Set-Cookie: sessionid=987654321
      Content-Length: 10
      Hello sri.
    
      GET /protected HTTP/1.1
      Host: mojolicio.us
      Cookie: $Version=1; sessionid=987654321
    
      HTTP/1.1 200 OK
      Set-Cookie: sessionid=987654321
      Content-Length: 16
      Hello again sri.

* * *

The notes below are simply some snapshots jump into my head

# Controller

## param method
The param method of our Mojolicious::Controller instance is used to access 

* query parameters `/?user=sir&passwd=secr3t`
* POST parameters  
* route placeholders `/:name`

all at once.

    my $user = $self->param('user') || '';


## helper method
A simple helper function can be registered with the helper method of Mojolicious
to make our model available to all actions and templates.

    helper users => sub { return $users };

## flash

    # get message from flash
    my $foo   = $c->flash('foo');
    # store message into flash
    $c        = $c->flash({foo => 'bar'});
    $c        = $c->flash(foo => 'bar');
    $c->redirect_to('next_action');
Data storage persistent only for the next request, stored in the session.

## State keeping
Sessions in Mojolicious pretty much just work out of the box and there is no
setup required, but we suggest using a more secure secret passphrase.  This
passphrase is used by the HMAC-MD5 algorithm to make signed cookies secure and
can be changed at any time to invalidate all existing sessions.

    $self->session(user => 'sri');
    my $user = $self->session('user');
By default all sessions expire after one hour, for more control you can also use
the expires session value to set the expiration date to a specific time in epoch
seconds.

    $self->session(expires => time + 3600);
And the whole session can be deleted by setting an expiration date in the past.

    $self->session(expires => 1);
For data that should only be visible on the next request, like a confirmation
message after a 302 redirect, you can use the flash.

    $self->flash(message => 'Everything is fine.');
    $self->redirect_to('goodbye');
Just remember that everything is stored in HMAC-MD5 signed cookies, so there is
usually a 4096 byte limit, depending on the browser.


# Test::Mojo

    $t->get_ok('/')->status_is(200)
        ->element_exists('form input[name="user"]')
        ->element_exists('form input[name="pass"]')
        ->element_exists('form input[type="submit"]');
    
      # Test login with valid credentials
      $t->post_form_ok('/' => {user => 'sri', pass => 'secr3t'})
        ->status_is(200)->text_like('html body' => qr/Welcome sri/);
